global !p
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def math():
	return (
	    vim.eval('vimtex#syntax#in_mathzone()') == '1' or 
	    env("align*") or
	    env("equation")
	)

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
endglobal



snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet sec "Section" b
\section{${1}}$0
endsnippet
snippet sec* "Section*" bA
\section*{${1}}$0
endsnippet

snippet subsec "subsection" b
\subsection{${1}}$0
endsnippet
snippet subsec* "subsection*" bA
\subsection*{${1}}$0
endsnippet


# ========== Text Abbreviations ==========
snippet cont "continuous" i
continuous 
endsnippet

snippet iff "if and only if" i
if and only if 
endsnippet

snippet nhbd "neighborhood" i
neighborhood 
endsnippet
snippet nhbds "neighborhoods" i
neighborhoods 
endsnippet

snippet st "such that" i
such that 
endsnippet

snippet fe "for every" i
for every 
endsnippet

snippet ae "almost everywhere" i
almost everywhere 
endsnippet

# ========== Text Mode ==========
snippet ttt "texttt" w
\texttt{$1} $0
endsnippet
snippet tit "textit" w
\textit{$1} $0
endsnippet
snippet tbf "textbf" w
\textbf{$1} $0
endsnippet

snippet ^^ "text superscript" wA
\textsuperscript{$1}$0
endsnippet


# ========== Enter/Exit Math Mode ========== 
snippet dm "Math" wA
\[
	${1:${VISUAL}}
\] $0
endsnippet

snippet mk "Math" wA
\(${1}\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', "'"]:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet mk "Math2" i
\(${1}\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', "'"]:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet



# sympy & mathematica
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

context "math()"
snippet != "nequals" iA
\neq 
endsnippet

context "math()"
snippet == "equiv" iA
\equiv 
endsnippet

context "math()"
snippet := "coloneqq" iA
\coloneqq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet


# logic
context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet ` AA` "forall" irA
 \forall 
endsnippet

context "math()"
snippet contra "contradiction" i
\contradiction
endsnippet

context "math()"
snippet => "implies" i
\implies
endsnippet

context "math()"
snippet =< "implied by" i
\impliedby
endsnippet







# set notation
context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet o/ "emptyset" w
\\{$1\\} $0
endsnippet

context "math()"
snippet ` in ` "in" rwA
 \in $0
endsnippet

context "math()"
snippet \ "setminus" w
\setminus
endsnippet

snippet mid "mid" w
\mid 
endsnippet

context "math()"
snippet ` cc ` "subset" rwA
 \subset 
endsnippet

context "math()"
snippet ` cceq ` "subseteq" rwA
 \subseteq 
endsnippet

context "math()"
snippet ` ccneq ` "subsetneq" rwA
 \subsetneq 
endsnippet

context "math()"
snippet ` ncc ` "supset" rwA
 \supset 
endsnippet

context "math()"
snippet ` ncceq ` "supseteq" rwA
 \supseteq 
endsnippet

context "math()"
snippet ` nccneq ` "supsetneq" rwA
 \supsetneq 
endsnippet

context "math()"
snippet nin "not in " wA
\not\in 
endsnippet

context "math()"
snippet compl "complement" iA
^\complement
endsnippet



# common symbols

context "math()"
snippet 'inv ' "inverse" riA
^{-1} $0
endsnippet

context "math()"
snippet inv "inverse" i
^{-1} $0
endsnippet


context "math()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet ` xx` "cross" irA
 \times 
endsnippet

context "math()"
snippet ` oxx` "ocross" irA
 \otimes 
endsnippet

context "math()"
snippet ` o\+` "ocross" irA
 \oplus 
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

snippet oo "\infty" i
\infty
endsnippet

priority 100
context "math()"
snippet c... "\cdots" iA
\cdots 
endsnippet

priority 10
context "math()"
snippet ... "\dots" iA
\dots 
endsnippet

context "math()"
snippet || "\norm{}" i
\norm{$1}$0
endsnippet


# functions
context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet




# Postfix snippets
priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([a-zA-Z}\]\)])\* " "^*" riA
`!p snip.rv=match.group(1)`^* 
endsnippet

context "math()"
snippet "([a-zA-Z}\]\)])\*\* " "^{**}" riA
`!p snip.rv=match.group(1)`^{**} 
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "tilde" "tilde" riA
\tilde{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "dot" "dot" ri
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])dot" "dot" ri
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "ddot" "ddot" riA
\ddot{$1}$0
endsnippet

priority 200
context "math()"
snippet "([a-zA-Z])ddot" "ddot" riA
\ddot{`!p snip.rv=match.group(1)`}
endsnippet

priority 200
context "math()"
snippet " c([A-Z])" "mathcal" riA
 \c`!p snip.rv=match.group(1)`
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 



# ========== Analysis ==========

context "math()"
snippet abs "abs" iA
\abs{$1} $0
endsnippet

context "math()"
snippet norm "norm" iA
\norm{$1} $0
endsnippet

priority 10
context "math()"
snippet dual "dual space" iA
^*
endsnippet

priority 100
context "math()"
snippet bidual "bidual" iA
^{**}
endsnippet

context "math()"
snippet -\ "rightharpoonup" iA
\rightharpoonup 
endsnippet

context "math()"
snippet weakto "weakto" i
\rightharpoonup 
endsnippet



