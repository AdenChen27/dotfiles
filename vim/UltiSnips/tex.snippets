# modified based on Gilles Castel's .snippet file: https://github.com/gillescastel/latex-snippets
# see also his blog post: https://castel.dev/post/lecture-notes-1/ 

global !p
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def math():
	return (
	    vim.eval('vimtex#syntax#in_mathzone()') == '1' or 
	    env("align*") or
	    env("equation")
	)

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'


endglobal



snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet sec "Section" b
\section{${1}}$0
endsnippet

snippet sec* "Section*" bA
\section*{${1}}$0
endsnippet

snippet subsec "subsection" b
\subsection{${1}}$0
endsnippet

snippet subsec* "subsection*" bA
\subsection*{${1}}$0
endsnippet

snippet th "th text superscript" i
\textsuperscript{th}
endsnippet

snippet cont "continuous" i
continuous 
endsnippet

snippet iff "if and only if" i
if and only if 
endsnippet

snippet nhbd "neighborhood" i
neighborhood 
endsnippet

snippet nhbds "neighborhoods" i
neighborhoods 
endsnippet

snippet todo "todo" 
\todo{TODO}
endsnippet

# Environments (text mode):
snippet beg "begin / end" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet enum "enumerate" b
\begin{enumerate}[label=${1:(\alph*)}]
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

# snippet definition "definition" bA
# \begin{definition}
# 	${1:${VISUAL}}
# \end{definition}
# endsnippet

snippet prop "proposition" b
\begin{proposition}$1
	${2:${VISUAL}}
\end{proposition}
endsnippet

snippet prop* "proposition" bA
\begin{proposition*}$1
	${2:${VISUAL}}
\end{proposition*}
endsnippet

snippet cor "corollary" b
\begin{corollary}$1
	${2:${VISUAL}}
\end{corollary}
endsnippet

snippet cor* "corollary*" bA
\begin{corollary*}
	${1:${VISUAL}}
\end{corollary*}
endsnippet

snippet eg "example" b
\begin{example}
	${1:${VISUAL}}
\end{example}
endsnippet

snippet ex "exercise" b
\begin{exercise}
	${1:${VISUAL}}
\end{exercise}
endsnippet

snippet rem "remark" b
\begin{remark}
	${1:${VISUAL}}
\end{remark}
endsnippet

snippet rem* "remark*" bA
\begin{remark*}
	${1:${VISUAL}}
\end{remark*}
endsnippet

snippet proof "proof" b
\begin{proof}
	${1:${VISUAL}}
\end{proof}
endsnippet

snippet problem "problem" b
\begin{problem}
	${1:${VISUAL}}
\end{problem}
endsnippet

snippet def* "definition*" bA
\begin{definition*}
	$0
\end{definition*}
endsnippet

snippet def "definition" b
\begin{definition}
	$0
\end{definition}
endsnippet

snippet lemma "lemma" b
\begin{lemma$1}
	$0
\end{lemma$1}
endsnippet

snippet lem "lemma" b
\begin{lemma}
	$0
\end{lemma}
endsnippet

snippet lem* "lemma*" bA
\begin{lemma*}
	$0
\end{lemma*}
endsnippet

snippet thm "theorem" b
\begin{theorem}${1}
	${2:${VISUAL}}
\end{theorem}
endsnippet

snippet thm* "theorem" bA
\begin{theorem*}${1}
	${2:${VISUAL}}
\end{theorem*}
endsnippet

snippet theorem "theorem" b
\begin{theorem}
	${1:${VISUAL}}
\end{theorem}
endsnippet
 
snippet equ "equation" b
\begin{equation}
	$0
\end{equation}
endsnippet

snippet equ* "equation*" bA
\begin{equation*}
	$0
\end{equation*}
endsnippet

snippet desc "description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

# enter/exit math mode
snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet mk "Math" wA
\(${1}\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', "'"]:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet mk "Math2" i
\(${1}\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', "'"]:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet


context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

# environments (math mode):
snippet ali "Align" bA
\begin{align$1}
	${2:${VISUAL}}
\end{align$1}
endsnippet


context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

# ========== math ==========
# fractions:
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


# sympy & mathematica
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

context "math()"
snippet != "nequals" iA
\neq 
endsnippet

context "math()"
snippet == "equiv" iA
\equiv 
endsnippet

context "math()"
snippet := "coloneqq" iA
\coloneqq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet


# math brackets & floor/ceil
snippet () "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet [] "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet {} "left{ right}" i
\left\{ ${1:${VISUAL}} \right\} $0
endsnippet

snippet <> "left< right>" i
\left< ${1:${VISUAL}} \right> $0
endsnippet




snippet lrp "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr{} "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[] "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left< ${1:${VISUAL}} \right>$0
endsnippet

# logic
context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

snippet contra "contradiction" i
\contradiction
endsnippet

snippet => "implies" i
\implies
endsnippet

snippet =< "implied by" i
\impliedby
endsnippet







# set notation
context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet o/ "emptyset" w
\\{$1\\} $0
endsnippet

context "math()"
snippet `in ` "in" rwA
\in $0
endsnippet

context "math()"
snippet \ "setminus" w
\setminus
endsnippet

snippet mid "mid" w
\mid 
endsnippet

context "math()"
snippet cc "subset" wA
\subset 
endsnippet

context "math()"
snippet nin "not in " wA
\not\in 
endsnippet

context "math()"
snippet compl "complement" iA
^\complement
endsnippet



# common symbols

context "math()"
snippet 'inv ' "inverse" riA
^{-1} $0
endsnippet

context "math()"
snippet inv "inverse" i
^{-1} $0
endsnippet

snippet st "such that" i
such that
endsnippet

snippet fe "for every" i
for every 
endsnippet

snippet vs "vector space" i
vector space 
endsnippet

snippet ae "almost everywhere" i
almost everywhere
endsnippet


context "math()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

snippet oo "\infty" i
\infty
endsnippet

context "math()"
snippet ... "\dots" iA
\dots
endsnippet

context "math()"
snippet || "\norm{}" i
\norm{$1}$0
endsnippet



# big symbols
context "math()"
snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet partial "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet partialk "d^k/dx^k" w
\frac{\partial^{$3} ${1:V}}{\partial ${2:x}^{$3}} $0
endsnippet

context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet



# subscripts and superscripts
context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

context "math()"
snippet nn "_n" i
_n$0
endsnippet

context "math()"
snippet ii "_i" i
_i$0
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet fnn "fn" iA
f_{n}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

context "math()"
snippet snn "sequence" iA
(${1:s}_n)${2:_{n \leq 1}} $0
endsnippet





# arrows etc (- logic)
priority 10
context "math()"
snippet -> "->" iA
\to
endsnippet

context "math()"
snippet >= ">=" i
\geq 
endsnippet

context "math()"
snippet <= "<=" i
\leq 
endsnippet

context "math()"
snippet overarr "overarrow" iA
\overrightarrow{$1}$0
endsnippet

priority 10
context "math()"
snippet <- "<-" iA
\leftarrow
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


# functions
context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	   $4 &\longmapsto $0
\end{align*}
endsnippet
# 	   $4 &\longmapsto $1($4) = $0



# Postfix snippets
priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "tilde" "tilde" riA
\tilde{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "dot" "dot" ri
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])dot" "dot" ri
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "ddot" "ddot" riA
\ddot{$1}$0
endsnippet

priority 200
context "math()"
snippet "([a-zA-Z])ddot" "ddot" riA
\ddot{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vect{`!p snip.rv=match.group(1)`}
endsnippet 



# ========== Analysis ==========

context "math()"
snippet abs "abs" iA
\abs{$1} $0
endsnippet

context "math()"
snippet norm "norm" iA
\norm{$1} $0
endsnippet

priority 10
context "math()"
snippet dual "dual space" iA
^*
endsnippet

priority 100
context "math()"
snippet bidual "bidual" iA
^{**}
endsnippet

context "math()"
snippet -\ "rightharpoonup" iA
\rightharpoonup 
endsnippet

context "math()"
snippet weakto "weakto" i
\rightharpoonup 
endsnippet



